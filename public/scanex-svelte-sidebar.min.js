(function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function addLoc(element, file, line, column, char) {
		element.__svelte_meta = {
			loc: { file, line, column, char }
		};
	}

	function run(fn) {
		fn();
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function setData(text, data) {
		text.data = '' + data;
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function destroyDev(detach) {
		destroy.call(this, detach);
		this.destroy = function() {
			console.warn('Component was already destroyed');
		};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function setDev(newState) {
		if (typeof newState !== 'object') {
			throw new Error(
				this._debugName + '.set was called without an object of data key-values to update.'
			);
		}

		this._checkReadOnly(newState);
		set.call(this, newState);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var protoDev = {
		destroy: destroyDev,
		get,
		fire,
		on,
		set: setDev,
		_recompute: noop,
		_set,
		_stage,
		_mount,
		_differs
	};

	/* src\Sidebar.html generated by Svelte v2.13.5 */

	function data() {
	    return {
	        tabs: [],
	        active: -1,
	        visible: false,
	    };
	}
	var methods = {
	    toggle (active, visible, i) {
	        if (active === i) {
	            let show = !visible;                    
	            this.set({active: show ? active : -1, visible: show});
	        }
	        else {
	            this.set({active: i, visible: true});
	        }                
	    },
	    panes () {
	        const ps = this.refs.panes.children;
	        let panes = [];
	        for (let i = 0; i < ps.length; ++i) {
	            panes.push(ps[i]);
	        }
	        return panes;
	    },
	    addTab ({active, normal, content}) {

	    }
	};

	const file = "src\\Sidebar.html";

	function create_main_fragment(component, ctx) {
		var div, div_1, text_1, div_2, current;

		var each_value = ctx.tabs;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		var each_value_1 = ctx.tabs;

		var each_1_blocks = [];

		for (var i = 0; i < each_value_1.length; i += 1) {
			each_1_blocks[i] = create_each_block_1(component, get_each_1_context(ctx, each_value_1, i));
		}

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text_1 = createText("\r\n    ");
				div_2 = createElement("div");

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].c();
				}
				div_1.className = "tabs svelte-7pf0z0";
				addLoc(div_1, file, 1, 4, 48);
				div_2.className = "panes svelte-7pf0z0";
				addLoc(div_2, file, 8, 4, 287);
				div.className = "scanex-sidebar svelte-7pf0z0";
				addLoc(div, file, 0, 0, 0);
			},

			m: function mount(target, anchor) {
				insert(target, div, anchor);
				append(div, div_1);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div_1, null);
				}

				component.refs.tabs = div_1;
				append(div, text_1);
				append(div, div_2);

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].m(div_2, null);
				}

				component.refs.panes = div_2;
				component.refs.container = div;
				current = true;
			},

			p: function update(changed, ctx) {
				if (changed.active || changed.visible || changed.tabs) {
					each_value = ctx.tabs;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(div_1, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}

				if (changed.visible || changed.active || changed.content || changed.tabs) {
					each_value_1 = ctx.tabs;

					for (var i = 0; i < each_value_1.length; i += 1) {
						const child_ctx = get_each_1_context(ctx, each_value_1, i);

						if (each_1_blocks[i]) {
							each_1_blocks[i].p(changed, child_ctx);
						} else {
							each_1_blocks[i] = create_each_block_1(component, child_ctx);
							each_1_blocks[i].c();
							each_1_blocks[i].m(div_2, null);
						}
					}

					for (; i < each_1_blocks.length; i += 1) {
						each_1_blocks[i].d(1);
					}
					each_1_blocks.length = each_value_1.length;
				}
			},

			i: function intro(target, anchor) {
				if (current) return;

				this.m(target, anchor);
			},

			o: run,

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(div);
				}

				destroyEach(each_blocks, detach);

				if (component.refs.tabs === div_1) component.refs.tabs = null;

				destroyEach(each_1_blocks, detach);

				if (component.refs.panes === div_2) component.refs.panes = null;
				if (component.refs.container === div) component.refs.container = null;
			}
		};
	}

	// (3:8) {#each tabs as t, i}
	function create_each_block(component, ctx) {
		var div, i_1, i_1_class_value;

		return {
			c: function create() {
				div = createElement("div");
				i_1 = createElement("i");
				i_1.className = i_1_class_value = "" + (ctx.active === ctx.i ? ctx.t.active : ctx.t.normal) + " svelte-7pf0z0";
				addLoc(i_1, file, 4, 16, 180);

				div._svelte = { component, ctx };

				addListener(div, "click", click_handler);
				div.className = "svelte-7pf0z0";
				addLoc(div, file, 3, 12, 119);
			},

			m: function mount(target, anchor) {
				insert(target, div, anchor);
				append(div, i_1);
			},

			p: function update(changed, _ctx) {
				ctx = _ctx;
				if ((changed.active || changed.tabs) && i_1_class_value !== (i_1_class_value = "" + (ctx.active === ctx.i ? ctx.t.active : ctx.t.normal) + " svelte-7pf0z0")) {
					i_1.className = i_1_class_value;
				}

				div._svelte.ctx = ctx;
			},

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(div, "click", click_handler);
			}
		};
	}

	// (10:8) {#each tabs as t, i}
	function create_each_block_1(component, ctx) {
		var div, text, div_class_value;

		return {
			c: function create() {
				div = createElement("div");
				text = createText(ctx.content);
				div.className = div_class_value = ctx.visible && ctx.active === ctx.i ? 'shown' : 'hidden';
				addLoc(div, file, 10, 12, 360);
			},

			m: function mount(target, anchor) {
				insert(target, div, anchor);
				append(div, text);
			},

			p: function update(changed, ctx) {
				if (changed.content) {
					setData(text, ctx.content);
				}

				if ((changed.visible || changed.active) && div_class_value !== (div_class_value = ctx.visible && ctx.active === ctx.i ? 'shown' : 'hidden')) {
					div.className = div_class_value;
				}
			},

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(div);
				}
			}
		};
	}

	function get_each_context(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.t = list[i];
		child_ctx.each_value = list;
		child_ctx.i = i;
		return child_ctx;
	}

	function click_handler(event) {
		const { component, ctx } = this._svelte;

		component.toggle(ctx.active, ctx.visible, ctx.i);
	}

	function get_each_1_context(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.t = list[i];
		child_ctx.each_value_1 = list;
		child_ctx.i = i;
		return child_ctx;
	}

	function Sidebar(options) {
		this._debugName = '<Sidebar>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this.refs = {};
		this._state = assign(data(), options.data);
		if (!('tabs' in this._state)) console.warn("<Sidebar> was created without expected data property 'tabs'");
		if (!('active' in this._state)) console.warn("<Sidebar> was created without expected data property 'active'");
		if (!('visible' in this._state)) console.warn("<Sidebar> was created without expected data property 'visible'");
		if (!('content' in this._state)) console.warn("<Sidebar> was created without expected data property 'content'");
		this._intro = !!options.intro;

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}

		this._intro = true;
	}

	assign(Sidebar.prototype, protoDev);
	assign(Sidebar.prototype, methods);

	Sidebar.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	let map = L.map(document.body, {zoomControl: false}).setView([54.04, 26.27], 5);
	L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(map);

	let SidebarControl = L.Control.extend({
	    includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,
	    initialize: function(options) {
	        L.setOptions(this, options);        
	    },
	    onAdd: function(map) {
			this._container = L.DomUtil.create('div');
			this._sidebar = new Sidebar({target: this._container});

			const tabs = [
				{active: 'fas fa-layer-group active', normal: 'fas fa-layer-group normal', content: 'Layers'},
				{active: 'fas fa-bolt active', normal: 'fas fa-bolt normal', content: 'Weather'},
				{active: 'fas fa-cogs active', normal: 'fas fa-cogs normal', content: 'Services'},
			];

			this._sidebar.set({tabs});
			const panes = this._sidebar.panes();
			for (let i = 0; i < panes.length; ++i) {
				panes[i].innerHTML = `<span>${tabs[i].content}</span>`;
			}

			this._sidebar.on('state', state => {
				console.log(state);
			});

	        return this._container;
	    },
	    addTo: function(map) {
	        L.Control.prototype.addTo.call(this, map);
	        if (this.options.addBefore) {
	            this.addBefore(this.options.addBefore);
	        }
	        return this;
	    },

	    addBefore: function(id) {
	        let parentNode = this._parent && this._parent._container;
	        if (!parentNode) {
	            parentNode = this._map && this._map._controlCorners[this.getPosition()];
	        }
	        if (!parentNode) {
	            this.options.addBefore = id;
	        }
	        else {
	            for (let i = 0, len = parentNode.childNodes.length; i < len; i++) {
	                let it = parentNode.childNodes[i];
	                if (id === it._id) {
	                    parentNode.insertBefore(this._container, it);
	                    break;
	                }
	            }
	        }
	        return this;
	    },    
	});

	let ctl = new SidebarControl({position: 'topleft'}).addTo(map);

}());
//# sourceMappingURL=scanex-svelte-sidebar.min.js.map
